import os
import smtplib
from email.mime.text import MIMEText
from email.header import Header
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

from datetime import datetime, timedelta, timezone
from pathlib import Path
import csv
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas

# ÌôòÍ≤Ω
SMTP_HOST       = os.getenv("SMTP_HOST")
SMTP_PORT       = os.getenv("SMTP_PORT")
SMTP_USER       = os.getenv("SMTP_USER")
SMTP_PASS       = os.getenv("SMTP_PASS")
REPORT_EMAIL_TO = os.getenv("REPORT_EMAIL_TO")

OUT_DIR   = Path("data/outputs")
HIST_DIR  = Path("data/history")
PDF_PATH  = OUT_DIR / "monthly_report.pdf"

def now_kst():
    return datetime.now(timezone(timedelta(hours=9)))

def send_email_with_pdf(subject: str, body_text: str, pdf_path: Path):
    if not (SMTP_HOST and SMTP_PORT and SMTP_USER and SMTP_PASS and REPORT_EMAIL_TO):
        raise EnvironmentError("SMTP ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.")
    if not pdf_path.exists():
        raise FileNotFoundError(f"Ï≤®Î∂ÄÌï† PDFÍ∞Ä ÏóÜÏäµÎãàÎã§: {pdf_path}")

    msg = MIMEMultipart()
    msg["Subject"] = Header(subject, "utf-8")
    msg["From"] = SMTP_USER
    msg["To"] = REPORT_EMAIL_TO

    # Î≥∏Î¨∏
    msg.attach(MIMEText(body_text, _charset="utf-8"))

    # Ï≤®Î∂Ä
    with pdf_path.open("rb") as f:
        part = MIMEBase("application", "pdf")
        part.set_payload(f.read())
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", f'attachment; filename="{pdf_path.name}"')
    msg.attach(part)

    with smtplib.SMTP(SMTP_HOST, int(SMTP_PORT)) as s:
        s.starttls()
        s.login(SMTP_USER, SMTP_PASS)
        s.sendmail(SMTP_USER, [REPORT_EMAIL_TO], msg.as_string())

def list_recent_weeks(n_days=28):
    # history ÎîîÎ†âÌÜ†Î¶¨ÏóêÏÑú ÏµúÍ∑º n_days ÎÇ¥ Ìè¥Îçî(YYYYMMDD)Î•º ÏàòÏßë
    cutoff = now_kst() - timedelta(days=n_days)
    folders = []
    for p in HIST_DIR.glob("*"):
        if p.is_dir():
            try:
                dt = datetime.strptime(p.name, "%Y%m%d")
                if dt >= cutoff.replace(tzinfo=None):
                    folders.append((dt, p))
            except:
                pass
    folders.sort(key=lambda x: x[0])
    return [p for _, p in folders]

def read_csv_rows(path: Path):
    try:
        with path.open(encoding="utf-8-sig") as f:
            return list(csv.DictReader(f))
    except:
        return []

def build_pdf():
    OUT_DIR.mkdir(parents=True, exist_ok=True)
    c = canvas.Canvas(str(PDF_PATH), pagesize=A4)
    W, H = A4
    margin = 40
    y = H - margin

    def line(txt, font="Helvetica", size=11, gap=16, bold=False):
        nonlocal y
        if bold:
            c.setFont("Helvetica-Bold", size)
        else:
            c.setFont(font, size)
        c.drawString(margin, y, txt[:110])  # Ìïú Ï§Ñ ÏµúÎåÄ Í∏∏Ïù¥ Ï†úÌïú
        y -= gap
        if y < margin:
            c.showPage()
            y = H - margin

    # Îç∞Ïù¥ÌÑ∞ Ìï©ÏÇ∞
    weeks = list_recent_weeks(28)
    topics_all, top5_all, rising_all, comp_all = [], [], [], []
    for wk in weeks:
        topics_all += read_csv_rows(wk / "weekly_topics.csv")
        top5_all  += read_csv_rows(wk / "weekly_top5_videos.csv")
        rising_all+= read_csv_rows(wk / "weekly_rising_keywords.csv")
        comp_all  += read_csv_rows(wk / "weekly_archetype_competition.csv")

    # ÌëúÏßÄ
    line(f"Monthly Senior Trends ‚Äî {now_kst().strftime('%Y-%m-%d %H:%M (KST)')}", size=14, bold=True, gap=20)
    line("ÏµúÍ∑º 4Ï£º(28Ïùº) ÏßëÍ≥Ñ ¬∑ Ï£ºÍ∞Ñ Î¶¨Ìè¨Ìä∏ CSV Ìï©ÏÇ∞ ÏöîÏïΩ", gap=24)

    # 1) Ïã†Í∑ú Ïú†Îßù Ï£ºÏ†ú(Ìï©ÏÇ∞)
    line("1) Ïã†Í∑ú Ïú†Îßù Ï£ºÏ†ú (4Ï£º Ìï©ÏÇ∞) ‚Äî ÏòàÏãú ÏÉÅÏúÑ 8Í∞ú", bold=True, gap=18)
    topic_counter = {}
    for r in topics_all:
        t = (r.get("topic") or "").strip()
        if t:
            topic_counter[t] = topic_counter.get(t, 0) + 1
    for i, (t, cnt) in enumerate(sorted(topic_counter.items(), key=lambda x: x[1], reverse=True)[:8], 1):
        line(f"{i}. {t} ¬∑ {cnt}Ìöå Îì±Ïû•")

    # 2) ÎàÑÏ†Å Top ÏòÅÏÉÅ 5
    line("", gap=10)
    line("2) ÎàÑÏ†Å Top ÏòÅÏÉÅ (ÏÉÅÏúÑ 5)", bold=True, gap=18)
    def to_int(x):
        try: return int(x)
        except: return 0
    top5_all_sorted = sorted(
        [{"title": r.get("title",""), "url": r.get("url",""), "views": to_int(r.get("views"))} for r in top5_all],
        key=lambda x: x["views"], reverse=True
    )[:5]
    for i, r in enumerate(top5_all_sorted, 1):
        line(f"{i}. {r['title']} ¬∑ Ï°∞ÌöåÏàò {r['views']:,}")

    # 3) Í∏âÏÉÅÏäπ ÌÇ§ÏõåÎìú Top 5
    line("", gap=10)
    line("3) Í∏âÏÉÅÏäπ ÌÇ§ÏõåÎìú (4Ï£º Ìï©ÏÇ∞ ÏÉÅÏúÑ 5)", bold=True, gap=18)
    def parse_float(x):
        try: return float(x)
        except: return None
    rising_scored = []
    for r in rising_all:
        delta = to_int(r.get("delta"))
        pct = parse_float(r.get("change_pct"))
        score = (delta * 10) + (pct if pct is not None else 50)  # Í∞ÑÎã® Í∞ÄÏ§ë Ï†êÏàò
        rising_scored.append((r.get("keyword",""), score))
    summarised = {}
    for k, s in rising_scored:
        summarised[k] = summarised.get(k,0) + s
    for i, (k, s) in enumerate(sorted(summarised.items(), key=lambda x: x[1], reverse=True)[:5], 1):
        line(f"{i}. {k} (Ï†êÏàò {int(s)})")

    # 4) Í≤ΩÏüÅÎèÑ ‚Äî ÏïÑÌÇ§ÌÉÄÏûÖ ÌèâÍ∑† ÏßÑÏûÖÎ•† ÏÉÅ/ÌïòÏúÑ 3
    line("", gap=10)
    line("4) Ïπ¥ÌÖåÍ≥†Î¶¨ Í≤ΩÏüÅÎèÑ (ÏÉÅÏúÑ/ÌïòÏúÑ)", bold=True, gap=18)
    comp_agg = {}
    for r in comp_all:
        t = r.get("archetype","")
        up = to_int(r.get("uploads"))
        th = to_int(r.get("top_hits"))
        if t:
            u0, t0 = comp_agg.get(t, (0,0))
            comp_agg[t] = (u0+up, t0+th)
    ratios = []
    for t, (up, th) in comp_agg.items():
        ratio = (th / up) if up else 0
        ratios.append((t, ratio))
    for hdr, seq in [("ÏÉÅÏúÑ 3 (ÏßÑÏûÖ Ïâ¨ÏõÄ)", sorted(ratios, key=lambda x: x[1], reverse=True)[:3]),
                     ("ÌïòÏúÑ 3 (ÏßÑÏûÖ Ïñ¥Î†§ÏõÄ)", sorted(ratios, key=lambda x: x[1])[:3])]:
        line(hdr, bold=True)
        for t, rto in seq:
            line(f"- {t}: ÏßÑÏûÖÎ•† {round(rto*100,1)}%")
        line("", gap=8)

    c.showPage()
    c.save()

def main():
    # PDF ÏÉùÏÑ±
    build_pdf()

    # Ïù¥Î©îÏùºÎ°ú PDF Ï≤®Î∂Ä Î∞úÏÜ°
    subject = "üìä Monthly Senior Trends ‚Äî 4Ï£º Ìï©ÏÇ∞ PDF (Ï≤®Î∂Ä)"
    body = "ÏõîÍ∞Ñ Ï¢ÖÌï© PDFÎ•º Ï≤®Î∂ÄÌñàÏäµÎãàÎã§.\n(ÏïÑÌã∞Ìå©Ìä∏ÏóêÏÑúÎèÑ Îã§Ïö¥Î°úÎìú Í∞ÄÎä•: Actions > monthly-pdf)"
    send_email_with_pdf(subject, body, PDF_PATH)

if __name__ == "__main__":
    main()
